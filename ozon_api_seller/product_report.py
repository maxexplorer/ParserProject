import os
import time
import requests
import pandas as pd
from datetime import datetime
from configs.config import CLIENT_ID, API_KEY, API_URLS
from utils import save_csv

# –ó–∞–≥–æ–ª–æ–≤–∫–∏
headers = {
    'Client-Id': CLIENT_ID,
    'Api-Key': API_KEY,
}

# –¶–µ–ª–µ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã (–ø–æ —Ç–≤–æ–µ–º—É –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é)
from data.data import COLUMN_MAPPING, TARGET_COLUMNS


def create_products_report(headers: dict) -> str | None:
    data = {
        'language': 'RU',
        'offer_id': [],
        'search': '',
        'sku': [],
        'visibility': 'ALL'
    }

    try:
        response = requests.post(API_URLS['report_products_create'], headers=headers, json=data, timeout=10)
        response.raise_for_status()
        return response.json().get('result', {}).get('code')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}')
        return None


def get_report_file_link(headers: dict, report_code: str) -> str | None:
    try:
        response = requests.post(API_URLS['report_info'], headers=headers, json={'code': report_code}, timeout=10)
        response.raise_for_status()
        result = response.json().get('result', {})
        if result.get('status') == 'success':
            return result.get('file')
        print(f'‚è≥ –°—Ç–∞—Ç—É—Å –æ—Ç—á—ë—Ç–∞: {result.get("status")}')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {e}')
    return None


def fetch_price_commission_data() -> list[dict]:
    result_data = []
    cursor = ''
    limit = 100

    while True:
        data = {
            'cursor': cursor,
            'filter': {
                'offer_id': [],
                'product_id': [],
                'visibility': 'ALL'
            },
            'limit': limit
        }

        try:
            time.sleep(1)
            response = requests.post(
                API_URLS['product_info_prices'],
                headers=headers,
                json=data,
                timeout=10
            )
            response.raise_for_status()
        except requests.exceptions.RequestException as e:
            print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ü–µ–Ω: {e}')
            break

        try:
            data = response.json()
        except ValueError:
            print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON.')
            break

        items = data.get('items', [])
        for item in items:
            offer_id = item.get('offer_id')
            price_info = item.get('price', {})
            commissions = item.get('commissions', {})

            acquiring = item.get('acquiring', 0)

            result_data.append({
                '–ê—Ä—Ç–∏–∫—É–ª': offer_id,
                '–≠–∫–≤–∞–π—Ä–∏–Ω–≥': acquiring,
                '–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ Ozon, FBO, %': commissions.get('sales_percent_fbo', 0),
                '–õ–æ–≥–∏—Å—Ç–∏–∫–∞ Ozon, –º–∏–Ω–∏–º—É–º, FBO': commissions.get('fbo_direct_flow_trans_min_amount', 0),
                '–õ–æ–≥–∏—Å—Ç–∏–∫–∞ Ozon, –º–∞–∫—Å–∏–º—É–º, FBO': commissions.get('fbo_direct_flow_trans_max_amount', 0),
                '–ü–æ—Å–ª–µ–¥–Ω—è—è –º–∏–ª—è, FBO': commissions.get('fbo_last_mile_amount', 0),
                '–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ Ozon, FBS, %': commissions.get('sales_percent_fbs', 0),
                '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –º–∏–Ω–∏–º—É–º FBS': commissions.get('fbs_processing_min_amount', 0),
                '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –º–∞–∫—Å–∏–º—É–º FBS': commissions.get('fbs_processing_max_amount', 0),
                '–õ–æ–≥–∏—Å—Ç–∏–∫–∞ Ozon, –º–∏–Ω–∏–º—É–º, FBS': commissions.get('fbs_direct_flow_trans_min_amount', 0),
                '–õ–æ–≥–∏—Å—Ç–∏–∫–∞ Ozon, –º–∞–∫—Å–∏–º—É–º, FBS': commissions.get('fbs_direct_flow_trans_max_amount', 0),
                '–ü–æ—Å–ª–µ–¥–Ω—è—è –º–∏–ª—è, FBS': commissions.get('fbs_last_mile_amount', 0),
            })

        cursor = data.get('cursor', '')
        if not cursor:
            break

    return result_data


def run_product_report() -> None:
    print('üì® –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç—á—ë—Ç –ø–æ —Ç–æ–≤–∞—Ä–∞–º...')
    report_code = create_products_report(headers)
    if not report_code:
        return

    print('‚è± –û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç—á—ë—Ç–∞...')
    for attempt in range(10):
        time.sleep(5)
        file_url = get_report_file_link(headers, report_code)
        if file_url:
            break
        print(f'üîÅ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/10...')
    else:
        print('‚ùå –û—Ç—á—ë—Ç –Ω–µ –±—ã–ª –≥–æ—Ç–æ–≤.')
        return

    timestamp = datetime.now().strftime('%Y%m%d_%H%M')
    csv_path = f'results/ozon_products_{timestamp}.csv'
    excel_path = f'results/ozon_products_{timestamp}.xlsx'

    # –°–∫–∞—á–∏–≤–∞–µ–º CSV
    save_csv(file_url, csv_path)

    # –ß–∏—Ç–∞–µ–º –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º
    df = pd.read_csv(csv_path, delimiter=';', encoding='utf-8')
    df.rename(columns=COLUMN_MAPPING, inplace=True)

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã
    for col in TARGET_COLUMNS:
        if col not in df.columns:
            df[col] = ''

    # –°—Ç—Ä–æ–∫–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ ‚Äî —á–∏—Å—Ç–∏–º
    str_cols = ['–ê—Ä—Ç–∏–∫—É–ª', 'SKU', 'Ozon SKU ID', '–®—Ç—Ä–∏—Ö–∫–æ–¥', 'Barcode', '–û–±—ä–µ–º, –ª', '–û–±—ä–µ–º–Ω—ã–π –≤–µ—Å, –∫–≥']
    for col in str_cols:
        if col in df.columns:
            df[col] = df[col].astype(str).str.lstrip("'").str.strip()

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏
    print('üì¶ –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∏—Å—Å–∏–æ–Ω–Ω—ã–µ –∏ —ç–∫–≤–∞–π—Ä–∏–Ω–≥...')
    commission_data = fetch_price_commission_data()
    commission_df = pd.DataFrame(commission_data)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ commission_df, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—à–∏–±–æ–∫
    needed_cols = [
        '–≠–∫–≤–∞–π—Ä–∏–Ω–≥', '–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ Ozon, FBO, %', '–õ–æ–≥–∏—Å—Ç–∏–∫–∞ Ozon, –º–∏–Ω–∏–º—É–º, FBO', '–õ–æ–≥–∏—Å—Ç–∏–∫–∞ Ozon, –º–∞–∫—Å–∏–º—É–º, FBO', '–ü–æ—Å–ª–µ–¥–Ω—è—è –º–∏–ª—è, FBO',
        '–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ Ozon, FBS, %', '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –º–∏–Ω–∏–º—É–º FBS', '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –º–∞–∫—Å–∏–º—É–º FBS',
        '–õ–æ–≥–∏—Å—Ç–∏–∫–∞ Ozon, –º–∏–Ω–∏–º—É–º, FBS', '–õ–æ–≥–∏—Å—Ç–∏–∫–∞ Ozon, –º–∞–∫—Å–∏–º—É–º, FBS', '–ü–æ—Å–ª–µ–¥–Ω—è—è –º–∏–ª—è, FBS'
    ]
    for col in needed_cols:
        if col not in commission_df.columns:
            commission_df[col] = 0

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ "–ê—Ä—Ç–∏–∫—É–ª"
    df = pd.merge(df, commission_df, how='left', on='–ê—Ä—Ç–∏–∫—É–ª')

    # –£–ø–æ—Ä—è–¥–æ—á–∏–º –ø–æ –Ω—É–∂–Ω—ã–º —Å—Ç–æ–ª–±—Ü–∞–º
    df = df[TARGET_COLUMNS]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    df.to_excel(excel_path, index=False)
    print(f'‚úÖ Excel —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {excel_path}')

