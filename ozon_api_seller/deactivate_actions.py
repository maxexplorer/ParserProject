import time
import requests

from configs.config import CLIENT_ID, API_KEY, API_URLS

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
headers = {
    'Client-Id': CLIENT_ID,
    'Api-Key': API_KEY,
}


def get_all_products(headers: dict) -> dict[int, str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –ø—Ä–æ–¥–∞–≤—Ü–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'IN_SALE'.

    :param headers: –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å Client-Id –∏ Api-Key
    :return: –°–ª–æ–≤–∞—Ä—å {product_id: offer_id}
    """
    result_data = {}
    last_id = ''
    limit = 100
    total_printed = False

    while True:
        data = {
            'filter': {'visibility': 'IN_SALE'},
            'last_id': last_id,
            'limit': limit
        }

        try:
            time.sleep(1)  # üîÅ –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –ª–∏–º–∏—Ç–æ–≤
            response = requests.post(
                API_URLS.get('product_list'),
                headers=headers,
                json=data,
                timeout=10
            )
            response.raise_for_status()
        except requests.exceptions.RequestException as e:
            print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤: {e}')
            break

        try:
            data = response.json()
        except ValueError:
            print('‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JSON-–æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.')
            break

        result = data.get('result', {})
        items = result.get('items', [])
        total = result.get('total')

        if not total_printed:
            print(f'üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total}')
            total_printed = True

        for item in items:
            offer_id = item.get('offer_id')
            product_id = item.get('product_id')
            if offer_id and product_id:
                result_data[product_id] = offer_id

        last_id = result.get('last_id', '')
        if not last_id:
            break

    return result_data


def get_all_actions(headers: dict) -> list[int]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ü–∏–π –ø—Ä–æ–¥–∞–≤—Ü–∞.

    :param headers: –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
    :return: –°–ø–∏—Å–æ–∫ ID –∞–∫—Ü–∏–π (list[int])
    """
    try:
        response = requests.get(API_URLS.get('actions'), headers=headers, timeout=10)
        response.raise_for_status()
    except requests.exceptions.RequestException as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ü–∏–π: {e}')
        return []

    try:
        data = response.json()
    except ValueError:
        print('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON-–æ—Ç–≤–µ—Ç–∞.')
        return []

    actions = data.get('result', [])
    print(f'üìä –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ü–∏–π: {len(actions)}')

    action_ids = [action.get('id') for action in actions if action.get('id')]
    return action_ids


def get_action_products(headers: dict, action_ids: list[int]) -> dict[int, list[int]]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã, —É—á–∞—Å—Ç–≤—É—é—â–∏–µ –≤ –∞–∫—Ü–∏—è—Ö —Å–æ —Å–ø–∏—Å–∫–æ–º action_id.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (add_mode == 'AUTO').

    :param headers: –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
    :param action_ids: –°–ø–∏—Å–æ–∫ ID –∞–∫—Ü–∏–π
    :return: –°–ª–æ–≤–∞—Ä—å –≤–∏–¥–∞ {action_id: [product_id1, product_id2, ...]}
    """
    result_data = {}
    limit = 100

    for action_id in action_ids:
        print(f'üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ü–∏–∏ ID {action_id}...')
        last_id = ''

        while True:
            data = {
                'action_id': action_id,
                'limit': limit,
                'offset': 0,
                'last_id': last_id
            }

            try:
                time.sleep(1)
                response = requests.post(
                    API_URLS.get('action_products'),
                    headers=headers,
                    json=data
                )
                response.raise_for_status()
            except requests.exceptions.RequestException as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∞–∫—Ü–∏–∏ {action_id}: {e}")
                break

            try:
                data = response.json()
            except ValueError:
                print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON –¥–ª—è –∞–∫—Ü–∏–∏ {action_id}.')
                break

            result = data.get('result', {})
            products = result.get('products', [])

            for product in products:
                product_id = product.get('id')
                mode = product.get('add_mode')
                if mode == 'AUTO' and product_id:
                    result_data.setdefault(action_id, []).append(product_id)

            print(f'‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}')

            last_id = result.get('last_id', '')
            if not products or not last_id:
                break

    return result_data


def deactivate_action_products(headers: dict, action_products: dict[int, list[int]]) -> None:
    """
    –£–¥–∞–ª—è–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ –∞–∫—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ —Å–ª–æ–≤–∞—Ä—è {action_id: [product_ids]}.

    :param headers: –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
    :param action_products: –°–ª–æ–≤–∞—Ä—å —Å ID –∞–∫—Ü–∏–π –∏ —Å–ø–∏—Å–∫–æ–º ID —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    """
    for action_id, product_ids in action_products.items():
        print(f'‚õî –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∞–∫—Ü–∏–∏ ID {action_id}...')

        data = {
            'action_id': action_id,
            'product_ids': product_ids
        }

        try:
            time.sleep(1)
            response = requests.post(
                API_URLS.get('action_products_deactivate'),
                headers=headers,
                json=data
            )
            response.raise_for_status()
        except requests.exceptions.RequestException as e:
            print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∞–∫—Ü–∏–∏ {action_id}: {e}')
            continue

        try:
            data = response.json()
        except ValueError:
            print(f'‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –¥–ª—è –∞–∫—Ü–∏–∏ {action_id}.')
            continue

        result = data.get('result', {})
        removed = result.get('product_ids', [])
        rejected = result.get('rejected', [])

        print(f'‚úÖ –£–¥–∞–ª–µ–Ω–æ: {len(removed)} —Ç–æ–≤–∞—Ä–æ–≤.')
        if rejected:
            print(f'‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: {rejected}')


def run_deactivate_actions() -> None:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è:
    - –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫—Ü–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞
    - –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å –∞–≤—Ç–æ–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º, —É—á–∞—Å—Ç–≤—É—é—â–∏–µ –≤ —ç—Ç–∏—Ö –∞–∫—Ü–∏—è—Ö
    - –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç (—É–¥–∞–ª—è–µ—Ç) —ç—Ç–∏ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∞–∫—Ü–∏–π

    ‚ö†Ô∏è –¢–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã —Å add_mode == 'AUTO' –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.
    """
    print('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∞–∫—Ü–∏–π...')
    action_ids = get_all_actions(headers=headers)

    if not action_ids:
        print('‚ùó –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ü–∏–π.')
        return

    action_products = get_action_products(headers=headers, action_ids=action_ids)

    if not action_products:
        print('‚ùó –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.')
        return

    deactivate_action_products(headers=headers, action_products=action_products)
