# process_orders.py

import os
import time
from datetime import datetime, timedelta
import glob

import requests
import pandas as pd

from configs.config import CLIENT_ID, API_KEY, API_URLS
from utils import save_excel


def get_cutoff_range(days=7):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –≤ ISO-—Ñ–æ—Ä–º–∞—Ç–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ `days` –¥–Ω–µ–π.

    :param days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    :return: –ö–æ—Ä—Ç–µ–∂ —Å—Ç—Ä–æ–∫ (–æ—Ç, –¥–æ)
    """
    cutoff_to = datetime.utcnow()
    cutoff_from = cutoff_to - timedelta(days=days)
    return cutoff_from.isoformat() + 'Z', cutoff_to.isoformat() + 'Z'


def fetch_orders(cutoff_from, cutoff_to):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "awaiting_packaging" –∏–∑ Ozon API.

    :param cutoff_from: –ù–∞—á–∞–ª–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    :param cutoff_to: –ö–æ–Ω–µ—Ü –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    :return: JSON-–æ—Ç–≤–µ—Ç –æ—Ç API –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    headers = {
        'Client-Id': CLIENT_ID,
        'Api-Key': API_KEY
    }

    json = {
        'dir': 'ASC',
        'filter': {
            'cutoff_from': cutoff_from,
            'cutoff_to': cutoff_to,
            'status': 'awaiting_packaging'
        },
        'limit': 100,
        'offset': 0,
        'with': {
            'analytics_data': True,
            'barcodes': True,
            'financial_data': True,
            'translit': True
        }
    }

    try:
        time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
        response = requests.post(API_URLS.get('unfulfilled_list'), headers=headers, json=json)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.HTTPError as err:
        print(f'‚ùå –û—à–∏–±–∫–∞ HTTP: {err}')
    except Exception as e:
        print(f'‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}')
    return None


def load_info_from_excel(folder='data'):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞—Ä—Ç–∏–∫—É–ª—ã –∏ —Ü–µ–Ω—ã –∏–∑ –ø–µ—Ä–≤–æ–≥–æ Excel-—Ñ–∞–π–ª–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ.

    :param folder: –ü–∞–ø–∫–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –∏—Å–∫–∞—Ç—å Excel-—Ñ–∞–π–ª
    :return: –°–ª–æ–≤–∞—Ä—å –≤–∏–¥–∞ {–∞—Ä—Ç–∏–∫—É–ª: —Ü–µ–Ω–∞}
    """
    excel_files = glob.glob(os.path.join(folder, '*.xlsx'))
    if not excel_files:
        print('‚ùó –í –ø–∞–ø–∫–µ data/ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ .xlsx —Ñ–∞–π–ª–æ–≤.')
        return {}

    path = excel_files[0]
    print(f'üìÑ –ó–∞–≥—Ä—É–∂–∞—é Excel: {path}')
    df = pd.read_excel(path)
    df.columns = df.columns.str.strip()
    df = df.dropna(subset=['–ê—Ä—Ç–∏–∫—É–ª', df.columns[2]])

    article_prices = {}
    for _, row in df.iterrows():
        article = str(row['–ê—Ä—Ç–∏–∫—É–ª']).strip()
        price = row.iloc[2]
        article_prices[article] = price

    return article_prices


def extract_data(postings, article_prices):
    """
    –ê–≥—Ä–µ–≥–∏—Ä—É–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É, –Ω–∞–∑–≤–∞–Ω–∏—é –∏ —Ü–µ–Ω–µ.

    :param postings: –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –æ—Ç API
    :param article_prices: –°–ª–æ–≤–∞—Ä—å –∞—Ä—Ç–∏–∫—É–ª–æ–≤ —Å —Ü–µ–Ω–∞–º–∏
    :return: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –ø–æ–ª—è–º–∏ –ê—Ä—Ç–∏–∫—É–ª, –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ, –¶–µ–Ω–∞, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
    """
    grouped = {}

    for post in postings:
        product = post.get('products', [{}])[0]
        offer_id = str(product.get('offer_id', '')).strip()

        if offer_id not in article_prices:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –∞—Ä—Ç–∏–∫—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Excel

        name = product.get('name', '').strip()
        quantity = int(product.get('quantity', 0))
        price = article_prices[offer_id]

        key = (offer_id, name, price)
        if key in grouped:
            grouped[key] += quantity
        else:
            grouped[key] = quantity

    result = []
    for key, qty in grouped.items():
        offer_id, name, price = key
        result.append({
            '–ê—Ä—Ç–∏–∫—É–ª': offer_id,
            '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ': name,
            '–¶–µ–Ω–∞': price,
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': qty
        })

    return result


def run_order_process():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è:
    - –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–∫–∞–∑—ã —Å Ozon
    - –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞—Ä—Ç–∏–∫—É–ª—ã –∏ —Ü–µ–Ω—ã –∏–∑ Excel
    - –ê–≥—Ä–µ–≥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ
    - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Excel
    """
    print('üì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ —Å Ozon...')
    cutoff_from, cutoff_to = get_cutoff_range(7)
    print(f'‚è± –ü–µ—Ä–∏–æ–¥: {cutoff_from} ‚Üí {cutoff_to}')

    orders = fetch_orders(cutoff_from, cutoff_to)
    if not orders:
        print('‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤.')
        return

    postings = orders.get('result', {}).get('postings', [])
    if not postings:
        print('‚ùó –ó–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "awaiting_packaging" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
        return

    article_info = load_info_from_excel()
    if not article_info:
        print('‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel.')
        return

    result = extract_data(postings, article_info)
    if not result:
        print('‚ùó –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.')
        return

    save_excel(data=result, filename_prefix='results/ozon_orders')
