import os
import glob
from datetime import datetime

import pandas as pd
from pandas import DataFrame
from openpyxl import load_workbook
from openpyxl.styles import PatternFill

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
ADDED_FILL = PatternFill(start_color="C6EFCE", end_color="C6EFCE", fill_type="solid")  # –ó–µ–ª—ë–Ω—ã–π ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
REMOVED_FILL = PatternFill(start_color="FFC7CE", end_color="FFC7CE", fill_type="solid")  # –ö—Ä–∞—Å–Ω—ã–π ‚Äî —É–¥–∞–ª—ë–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
CHANGED_FILL = PatternFill(start_color="FFEB9C", end_color="FFEB9C", fill_type="solid")  # –ñ—ë–ª—Ç—ã–π ‚Äî –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–µ —è—á–µ–π–∫–∏


def load_excel(path: str) -> DataFrame:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç Excel-—Ñ–∞–π–ª –≤ DataFrame, –æ—á–∏—â–∞—è –ø—Ä–æ–±–µ–ª—ã –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö –∏ –∑–∞–º–µ–Ω—è—è NaN –Ω–∞ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏.

    :param path: –ü—É—Ç—å –∫ Excel-—Ñ–∞–π–ª—É
    :return: DataFrame —Å –æ—á–∏—â–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    """
    df = pd.read_excel(path, dtype=str)
    df.columns = df.columns.str.strip()
    return df.fillna('')


def compare_data(old_df: DataFrame, new_df: DataFrame, key_column: str = '–ê—Ä—Ç–∏–∫—É–ª') -> tuple:
    """
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–∞ DataFrame –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å—Ç–æ–ª–±—Ü—É, –æ–ø—Ä–µ–¥–µ–ª—è—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ, —É–¥–∞–ª—ë–Ω–Ω—ã–µ –∏ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏.

    :param old_df: –°—Ç–∞—Ä—ã–π DataFrame
    :param new_df: –ù–æ–≤—ã–π DataFrame
    :param key_column: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '–ê—Ä—Ç–∏–∫—É–ª')
    :return: –ö–æ—Ä—Ç–µ–∂ –∏–∑ (–¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏, —É–¥–∞–ª—ë–Ω–Ω—ã–µ –∫–ª—é—á–∏, —Å–ª–æ–≤–∞—Ä—å –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    """
    old_df = old_df.set_index(key_column)
    new_df = new_df.set_index(key_column)

    added_keys = new_df.index.difference(old_df.index)
    removed_keys = old_df.index.difference(new_df.index)
    common_keys = new_df.index.intersection(old_df.index)

    changes: dict[str, dict[str, bool]] = {}

    for key in common_keys:
        row_changes = {}
        for col in new_df.columns:
            old_val = old_df.at[key, col] if col in old_df.columns else ''
            new_val = new_df.at[key, col] if col in new_df.columns else ''
            if str(old_val).strip() != str(new_val).strip():
                row_changes[col] = True
        if row_changes:
            changes[key] = row_changes

    return added_keys, removed_keys, changes


def apply_formatting(result_path: str, added: list, removed: list, changed: dict, key_column: str = '–ê—Ä—Ç–∏–∫—É–ª') -> None:
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ü–≤–µ—Ç–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ Excel-—Ñ–∞–π–ª—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.

    :param result_path: –ü—É—Ç—å –∫ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–º—É Excel-—Ñ–∞–π–ª—É
    :param added: –°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
    :param removed: –°–ø–∏—Å–æ–∫ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
    :param changed: –°–ª–æ–≤–∞—Ä—å –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ –∫–ª—é—á–∞–º –∏ —Å—Ç–æ–ª–±—Ü–∞–º
    :param key_column: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '–ê—Ä—Ç–∏–∫—É–ª')
    """
    wb = load_workbook(result_path)
    ws = wb.active

    # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞ –∏ –∏–Ω–¥–µ–∫—Å–∞
    header = {cell.value: idx for idx, cell in enumerate(ws[1])}
    key_idx = header.get(key_column)

    # –ó–∞–∫—Ä–∞—à–∏–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∏ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    for row in ws.iter_rows(min_row=2):
        key = str(row[key_idx].value).strip()
        if key in added:
            for cell in row:
                cell.fill = ADDED_FILL
        elif key in changed:
            for col, is_changed in changed[key].items():
                if is_changed:
                    col_idx = header.get(col)
                    if col_idx is not None:
                        row[col_idx].fill = CHANGED_FILL

    # –î–æ–±–∞–≤–ª—è–µ–º —É–¥–∞–ª—ë–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω–µ—Ü —Ç–∞–±–ª–∏—Ü—ã
    last_row = ws.max_row + 1
    for key in removed:
        ws.cell(row=last_row, column=key_idx + 1, value=key).fill = REMOVED_FILL
        for col, idx in header.items():
            if col != key_column:
                ws.cell(row=last_row, column=idx + 1, value='(–£–¥–∞–ª—ë–Ω)').fill = REMOVED_FILL
        last_row += 1

    wb.save(result_path)


def save_result(new_df: DataFrame, output_dir: str = 'results') -> str:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç DataFrame –≤ Excel-—Ñ–∞–π–ª —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.

    :param new_df: DataFrame –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    :param output_dir: –ü–∞–ø–∫–∞, –∫—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    :return: –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
    """
    now_str = datetime.now().strftime('%Y%m%d_%H%M')
    filename = f"result_{now_str}.xlsx"
    output_path = os.path.join(output_dir, filename)

    if output_dir:
        os.makedirs(output_dir, exist_ok=True)

    new_df.to_excel(output_path, index=False)
    return output_path


def main() -> None:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å:
    1. –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–≤–∞ Excel-—Ñ–∞–π–ª–∞ –∏–∑ –ø–∞–ø–∫–∏ `data/`
    2. –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –∏—Ö –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å—Ç–æ–ª–±—Ü—É
    3. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
    4. –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ü–≤–µ—Ç–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    """
    folder = 'data'
    excel_files = sorted(glob.glob(os.path.join(folder, '*.xlsx')))
    if len(excel_files) < 2:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–∏–Ω–∏–º—É–º –¥–≤–∞ .xlsx —Ñ–∞–π–ª–∞ –≤ –ø–∞–ø–∫–µ 'data'")
        return

    old_path = excel_files[0]
    new_path = excel_files[1]

    print('üìÅ –ó–∞–≥—Ä—É–∂–∞—é —Ç–∞–±–ª–∏—Ü—ã...')
    old_df = load_excel(old_path)
    new_df = load_excel(new_path)

    print('üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...')
    added, removed, changed = compare_data(old_df, new_df)

    print('üíæ –°–æ—Ö—Ä–∞–Ω—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç...')
    result_file = save_result(new_df)

    print('üé® –ü—Ä–∏–º–µ–Ω—è—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...')
    apply_formatting(result_file, added, removed, changed)

    print(f'‚úÖ –ì–æ—Ç–æ–≤–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç: {result_file}')


if __name__ == '__main__':
    main()
