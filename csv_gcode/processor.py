# processor.py

import os
import csv
import glob

from macros import macros, command_map
from data import gcode_header


def process_all_csv(folder: str, output_folder: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ CSV –≤ –ø–∞–ø–∫–µ."""
    files = read_csv_files(folder)
    if not files:
        print('[INFO] –ù–µ—Ç CSV —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')
        return

    os.makedirs(output_folder, exist_ok=True)

    for file_path in files:
        process_csv_file(file_path, output_folder)


def read_csv_files(folder: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—É—Ç–µ–π –∫ CSV —Ñ–∞–π–ª–∞–º –≤ –ø–∞–ø–∫–µ."""
    return glob.glob(os.path.join(folder, "*.csv*"))


def process_csv_file(file_path: str, output_folder: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω CSV —Ñ–∞–π–ª –ø–æ –Ω–æ–≤—ã–º –ø—Ä–∞–≤–∏–ª–∞–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º command_map."""
    output_lines = []
    file_name = os.path.splitext(os.path.basename(file_path))[0]
    output_path = os.path.join(output_folder, f'{file_name}.txt')

    print(f'\n[START] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {file_name}.csv')

    # üìå –î–æ–±–∞–≤–ª—è–µ–º G-–∫–æ–¥—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –Ω–∞—á–∞–ª–æ
    output_lines.extend(gcode_header)

    with open(file_path, 'r', encoding='utf-8') as f:
        reader = csv.reader(f, delimiter=',')
        next(reader, None)  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫

        for row_num, row in enumerate(reader, start=2):
            try:
                repeats = int(row[5])  # 6-–π —Å—Ç–æ–ª–±–µ—Ü
                length = float(row[6])  # 7-–π —Å—Ç–æ–ª–±–µ—Ü
            except (IndexError, ValueError):
                print(f'[WARN] {file_name} ‚Äî —Å—Ç—Ä–æ–∫–∞ {row_num}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ 6 –∏–ª–∏ 7 —Å—Ç–æ–ª–±—Ü—ã')
                continue

            blocks = ['0']  # –Ω–∞—á–∞–ª–æ –±–ª–æ–∫–∞
            col_idx = 12  # 13-–π —Å—Ç–æ–ª–±–µ—Ü ‚Äî –ø–µ—Ä–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
            commands_in_row = []

            # –°—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –≤ —Å—Ç—Ä–æ–∫–µ
            while col_idx < len(row) - 1:
                csv_command = row[col_idx].strip()
                try:
                    y_value = float(row[col_idx + 1])
                except ValueError:
                    print(f'[WARN] {file_name} ‚Äî —Å—Ç—Ä–æ–∫–∞ {row_num}, —Å—Ç–æ–ª–±–µ—Ü {col_idx + 1}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ Y')
                    y_value = 0.0

                if csv_command in command_map:
                    macro_key = command_map[csv_command]

                    # –ï—Å–ª–∏ macro_key ‚Äî –∫–æ—Ä—Ç–µ–∂ (END_TRUSS)
                    if isinstance(macro_key, tuple):
                        start_macro, finish_macro = macro_key
                        # –ü–µ—Ä–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤ —Å—Ç—Ä–æ–∫–µ ‚Äî END_TRUSS_START
                        if col_idx == 12:
                            blocks.extend(macros[start_macro](y_value).splitlines())
                        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö END_TRUSS –≤—ã–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ –∫–∞–∫ –æ–±—ã—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
                    else:
                        blocks.extend(macros[macro_key](y_value).splitlines())

                    commands_in_row.append(csv_command)

                col_idx += 2

            # –í—Å—Ç–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
            last_command = commands_in_row[-1] if commands_in_row else None

            if last_command and last_command.startswith('END_TRUSS'):
                blocks.extend(macros[finish_macro](length).splitlines())
                blocks.extend(macros['CUT_LENGTH'](length).splitlines())
            else:
                blocks.extend(macros['CUT']().splitlines())

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª–∏–Ω—É –∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
            blocks.append(str(length))
            blocks.append('')

            # –î—É–±–ª–∏—Ä—É–µ–º –±–ª–æ–∫ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑
            for _ in range(repeats):
                output_lines.extend(blocks)

    # –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    with open(output_path, 'w', encoding='utf-8') as out:
        out.write('\n'.join(output_lines))

    print(f'[DONE] –§–∞–π–ª {file_name}.csv ‚Üí {file_name}.txt')
    print(f'–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {row_num}, –±–ª–æ–∫–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {len(output_lines)}')

