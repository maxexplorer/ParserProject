# parser.py

import asyncio
from telethon.tl.functions.channels import JoinChannelRequest, LeaveChannelRequest
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties  # <-- –î–æ–±–∞–≤–ª–µ–Ω–æ
from configs.config import token
from parser import TelegramKeywordParser
from user_data import load_user_data, update_keywords, update_chats, update_exceptions

bot = Bot(
    token=token,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)  # <-- –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
)
dp = Dispatcher()

active_parsers = {}


def process_chat_url(chat_url: str) -> str:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç URL —á–∞—Ç–∞, —É–±–∏—Ä–∞—è –Ω–µ–Ω—É–∂–Ω—ã–µ —á–∞—Å—Ç–∏."""
    return chat_url.strip().replace("https://t.me/", "").replace("@", "")


@dp.message(Command("start"))
async def start(message: Message):
    chat_id = str(message.chat.id)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.")

    user_data = load_user_data(chat_id)
    parser = TelegramKeywordParser(
        keywords=user_data.get("keywords", []),
        chats=user_data.get("chats", []),
        exceptions=user_data.get("exceptions", []),
        bot=bot,
        chat_id=chat_id
    )

    active_parsers[chat_id] = parser
    asyncio.create_task(parser.run())  # –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –≤ —Ñ–æ–Ω–µ


@dp.message(F.text.startswith("+") & ~F.text.startswith("+—á–∞—Ç"))
async def add_keywords(message: Message):
    chat_id = str(message.chat.id)
    keywords = [kw.strip().lower() for kw in message.text[1:].split()]
    update_keywords(chat_id, keywords, add=True)

    if chat_id in active_parsers:
        active_parsers[chat_id].load_data_from_file(load_user_data(chat_id))

    await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(keywords)}")


@dp.message(F.text.startswith("-") & ~F.text.startswith("-—á–∞—Ç"))
async def remove_keywords(message: Message):
    chat_id = str(message.chat.id)
    keywords = [kw.strip().lower() for kw in message.text[1:].split()]
    update_keywords(chat_id, keywords, add=False)

    if chat_id in active_parsers:
        active_parsers[chat_id].load_data_from_file(load_user_data(chat_id))

    await message.answer(f"‚ùå –£–¥–∞–ª–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(keywords)}")


@dp.message(F.text.lower().startswith("+—á–∞—Ç"))
async def add_chats(message: Message):
    chat_id = str(message.chat.id)
    chats = [process_chat_url(chat) for chat in message.text[4:].split()]

    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–∂–¥—ã–π —á–∞—Ç —á–µ—Ä–µ–∑ Telethon
    if chat_id in active_parsers:
        client = active_parsers[chat_id].client
        for chat in chats:
            try:
                chat_entity = await client.get_entity(chat)
                if chat_entity:
                    await client(JoinChannelRequest(chat_entity))
                    await asyncio.sleep(1)  # –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ñ–ª—É–¥-–ª–∏–º–∏—Ç–∞
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {chat}: {e}")

    # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    update_chats(chat_id, chats)

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞—Ä—Å–µ—Ä
    if chat_id in active_parsers:
        active_parsers[chat_id].load_data_from_file(user_data=load_user_data(chat_id))

    await message.answer(f"üìå –î–æ–±–∞–≤–ª–µ–Ω—ã –∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —á–∞—Ç—ã:\n{chr(10).join(chats)}")


@dp.message(F.text.lower().startswith("-—á–∞—Ç"))
async def remove_chats(message: Message):
    chat_id = str(message.chat.id)
    chats = [process_chat_url(chat) for chat in message.text[5:].split()]

    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞ —á–µ—Ä–µ–∑ Telethon
    if chat_id in active_parsers:
        client = active_parsers[chat_id].client
        for chat in chats:
            try:
                chat_entity = await client.get_entity(chat)
                if chat_entity:
                    await client(LeaveChannelRequest(chat_entity))
                    await asyncio.sleep(1)  # —á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞—Å—Ç—å –ø–æ–¥ –ª–∏–º–∏—Ç—ã
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç {chat}: {e}")

    # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    update_chats(chat_id, chats, add=False)

    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞—Ä—Å–µ—Ä
    if chat_id in active_parsers:
        active_parsers[chat_id].load_data_from_file(user_data=load_user_data(chat_id))

    await message.answer(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω—ã –∏ –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —á–∞—Ç–æ–≤:\n{chr(10).join(chats)}")


@dp.message(F.text.lower() == "—Å–ø–∞–º")
async def mark_spam(message: Message):
    if not message.reply_to_message:
        return await message.answer("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–º–µ—Ç–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∫–∞–∫ —Å–ø–∞–º.")

    spam_sender_id = message.reply_to_message.from_user.id
    chat_id = str(message.chat.id)
    update_exceptions(chat_id, [spam_sender_id], add=True)

    if chat_id in active_parsers:
        active_parsers[chat_id].load_data_from_file(load_user_data(chat_id))

    await message.answer(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {spam_sender_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è.")


@dp.message(F.text.lower().startswith("—Å–ª–æ–≤–∞"))
async def show_keywords(message: Message):
    chat_id = str(message.chat.id)
    keywords = load_user_data(chat_id).get("keywords", [])
    await message.answer("üîç –í–∞—à–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:\n" + ("\n".join(keywords) if keywords else "‚ùå –ù–µ—Ç —Å–ª–æ–≤."))


@dp.message(F.text.lower().startswith("—á–∞—Ç—ã"))
async def show_chats(message: Message):
    chat_id = str(message.chat.id)
    chats = load_user_data(chat_id).get("chats", [])
    await message.answer("üìÇ –í–∞—à–∏ —á–∞—Ç—ã:\n" + ("\n".join(chats) if chats else "‚ùå –ù–µ—Ç —á–∞—Ç–æ–≤."))


async def main():
    await dp.start_polling(bot)
