# bot.py

import re
import asyncio
from telethon.tl.functions.channels import JoinChannelRequest, LeaveChannelRequest
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

from parser import TelegramKeywordParser
from user_data import load_user_data, update_keywords, update_chats, update_exceptions


class ChatParserBot:
    def __init__(self, token: str):
        self.bot = Bot(
            token=token,
            default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        )
        self.dp = Dispatcher()
        self.active_parsers = {}
        self._register_handlers()  # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤


    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤"""
        self.dp.message(Command("start"))(self.start_handler)
        self.dp.message(
            F.text.startswith("+") &
            ~F.text.lower().startswith("+—á–∞—Ç") &
            ~F.text.lower().startswith("+—Å—Ç–æ–ø")
        )(self.add_keywords_handler)
        self.dp.message(
            F.text.startswith("-") &
            ~F.text.lower().startswith("-—á–∞—Ç") &
            ~F.text.lower().startswith("-—Å—Ç–æ–ø")
        )(self.remove_keywords_handler)
        self.dp.message(F.text.lower().startswith("+—á–∞—Ç"))(self.add_chats_handler)
        self.dp.message(F.text.lower().startswith("-—á–∞—Ç"))(self.remove_chats_handler)
        self.dp.message(F.text.lower().startswith("+—Å—Ç–æ–ø"))(self.add_stopwords_handler)
        self.dp.message(F.text.lower().startswith("-—Å—Ç–æ–ø"))(self.remove_stopwords_handler)
        self.dp.message(F.text.lower() == "—Å–ø–∞–º")(self.mark_spam_handler)
        self.dp.message(F.text.lower().startswith("—Å–ª–æ–≤–∞"))(self.show_keywords_handler)
        self.dp.message(F.text.lower().startswith("—á–∞—Ç—ã"))(self.show_chats_handler)

    def process_chat_url(self, chat_url: str) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç URL —á–∞—Ç–∞, —É–±–∏—Ä–∞—è –Ω–µ–Ω—É–∂–Ω—ã–µ —á–∞—Å—Ç–∏."""
        return chat_url.strip().replace("https://t.me/", "").replace("@", "")

    async def start_handler(self, message: Message):
        chat_id = str(message.chat.id)

        if chat_id in self.active_parsers:
            await message.answer("‚ÑπÔ∏è –ü–∞—Ä—Å–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")
            return

        await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.")

        user_data = load_user_data(chat_id)
        parser = TelegramKeywordParser(
            keywords=user_data.get("keywords", []),
            stopwords=user_data.get("stopwords", []),
            chats=user_data.get("chats", []),
            exceptions=user_data.get("exceptions", []),
            bot=self.bot,
            chat_id=chat_id,
            print_dialogs=False
        )

        self.active_parsers[chat_id] = parser
        asyncio.create_task(parser.run())  # –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –≤ —Ñ–æ–Ω–µ

    async def add_keywords_handler(self, message: Message):
        chat_id = str(message.chat.id)
        raw_text = message.text[1:]

        keywords = [kw.strip().strip('"\'').lower() for kw in raw_text.split(',') if kw.strip()]
        update_keywords(chat_id, keywords, add=True)

        if chat_id in self.active_parsers:
            self.active_parsers[chat_id].load_data_from_file(load_user_data(chat_id))

        await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(keywords)}")

    async def remove_keywords_handler(self, message: Message):
        chat_id = str(message.chat.id)
        raw_text = message.text[1:]

        keywords = [kw.strip().lower() for kw in raw_text.split(',') if kw.strip()]
        update_keywords(chat_id, keywords, add=False)

        if chat_id in self.active_parsers:
            self.active_parsers[chat_id].load_data_from_file(load_user_data(chat_id))

        await message.answer(f"‚ùå –£–¥–∞–ª–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(keywords)}")

    async def add_stopwords_handler(self, message: Message):
        chat_id = str(message.chat.id)
        raw_text = message.text[5:]

        stopwords = [kw.strip().strip('"\'').lower() for kw in raw_text.split(',') if kw.strip()]
        update_keywords(chat_id, stopwords, add=True)

        if chat_id in self.active_parsers:
            self.active_parsers[chat_id].load_data_from_file(load_user_data(chat_id))

        await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Å–ª–æ–≤–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {', '.join(stopwords)}")

    async def remove_stopwords_handler(self, message: Message):
        chat_id = str(message.chat.id)
        raw_text = message.text[5:]

        stopwords = [kw.strip().lower() for kw in raw_text.split(',') if kw.strip()]
        update_keywords(chat_id, stopwords, add=False)

        if chat_id in self.active_parsers:
            self.active_parsers[chat_id].load_data_from_file(load_user_data(chat_id))

        await message.answer(f"‚ùå –£–¥–∞–ª–µ–Ω—ã —Å–ª–æ–≤–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {', '.join(stopwords)}")

    async def add_chats_handler(self, message: Message):
        chat_id = str(message.chat.id)
        chats = [self.process_chat_url(chat) for chat in message.text[4:].split()]
        join_chats = []

        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–∂–¥—ã–π —á–∞—Ç —á–µ—Ä–µ–∑ Telethon
        if chat_id in self.active_parsers:
            client = self.active_parsers[chat_id].client
            for chat in chats:
                try:
                    chat_entity = await client.get_entity(chat)
                    if chat_entity:
                        await client(JoinChannelRequest(chat_entity))
                        join_chats.append(chat)
                        await asyncio.sleep(1)  # –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ñ–ª—É–¥-–ª–∏–º–∏—Ç–∞
                except Exception as e:
                    await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ <code>{chat}</code>: {e}")
                    continue

        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        update_chats(chat_id, join_chats)

        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞—Ä—Å–µ—Ä
        if chat_id in self.active_parsers:
            self.active_parsers[chat_id].load_data_from_file(user_data=load_user_data(chat_id))

        await message.answer(f"üìå –î–æ–±–∞–≤–ª–µ–Ω—ã –∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —á–∞—Ç—ã:\n{chr(10).join(join_chats)}")

    async def remove_chats_handler(self, message: Message):
        chat_id = str(message.chat.id)
        chats = [self.process_chat_url(chat) for chat in message.text[4:].split()]
        leave_chats = []

        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞ —á–µ—Ä–µ–∑ Telethon
        if chat_id in self.active_parsers:
            client = self.active_parsers[chat_id].client
            for chat in chats:
                try:
                    chat_entity = await client.get_entity(chat)
                    if chat_entity:
                        await client(LeaveChannelRequest(chat_entity))
                        leave_chats.append(chat)
                        await asyncio.sleep(1)  # —á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞—Å—Ç—å –ø–æ–¥ –ª–∏–º–∏—Ç—ã
                except Exception as e:
                    await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –Ω–∞ <code>{chat}</code>: {e}")
                    continue

        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        update_chats(chat_id, leave_chats, add=False)

        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞—Ä—Å–µ—Ä
        if chat_id in self.active_parsers:
            self.active_parsers[chat_id].load_data_from_file(user_data=load_user_data(chat_id))

        await message.answer(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω—ã –∏ –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —á–∞—Ç–æ–≤:\n{chr(10).join(leave_chats)}")

    async def mark_spam_handler(self, message: Message):
        if not message.reply_to_message:
            return await message.answer("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–º–µ—Ç–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∫–∞–∫ —Å–ø–∞–º.")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –º—ã –æ—Ç–≤–µ—á–∞–µ–º
        replied_message = message.reply_to_message.text

        # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ ID –∏–ª–∏ username –ø–æ—Å–ª–µ "–ê–≤—Ç–æ—Ä: "
        sender_pattern = r"–ê–≤—Ç–æ—Ä:\s+(@?[\w\d]+)"  # –∏—â–µ–º @username –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ id

        match = re.search(sender_pattern, replied_message)

        if not match:
            return await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.")

        sender_value = match.group(1).lstrip("@")  # –£–±–∏—Ä–∞–µ–º @, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å

        chat_id = str(message.chat.id)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        update_exceptions(chat_id, [sender_value], add=True)

        # –ï—Å–ª–∏ –ø–∞—Ä—Å–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è —á–∞—Ç–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if chat_id in self.active_parsers:
            self.active_parsers[chat_id].load_data_from_file(load_user_data(chat_id))

        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {sender_value} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∞–º.")

    async def show_keywords_handler(self, message: Message):
        chat_id = str(message.chat.id)
        keywords = load_user_data(chat_id).get("keywords", [])
        await message.answer("üîç –í–∞—à–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:\n" + ("\n".join(keywords) if keywords else "‚ùå –ù–µ—Ç —Å–ª–æ–≤."))

    async def show_chats_handler(self, message: Message):
        chat_id = str(message.chat.id)
        chats = load_user_data(chat_id).get("chats", [])
        await message.answer("üìÇ –í–∞—à–∏ —á–∞—Ç—ã:\n" + ("\n".join(chats) if chats else "‚ùå –ù–µ—Ç —á–∞—Ç–æ–≤."))
