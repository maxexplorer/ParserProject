# parser.py
import re

from aiogram import Bot
from telethon import TelegramClient, events
from configs.config import api_id, api_hash, session_name


class TelegramKeywordParser:
    def __init__(self, keywords: list[str], chats: list[str], bot: Bot, chat_id):
        self.keywords = [kw.lower() for kw in keywords]
        # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º–µ–Ω–∞ —á–∞—Ç–æ–≤ (—É–¥–∞–ª—è–µ–º @ –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É)
        self.chats = [
            chat.strip().replace("https://t.me/", "").lower().lstrip("@")
            for chat in chats
        ]
        self.bot = bot
        self.chat_id = chat_id
        self.client = TelegramClient(session_name, api_id, api_hash)

    async def run(self):
        await self.client.start()

        # –û–¥–∏–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –≤—Å–µ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.client.add_event_handler(self._new_message_handler, events.NewMessage())

        print("\n[‚Üí] –ü–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
        await self.client.run_until_disconnected()

    async def _new_message_handler(self, event):
        message = event.message
        if not message.message:
            return

        # # üîç –í–´–í–û–î–ò–ú –í–°–ï –ù–û–í–´–ï –°–û–û–ë–©–ï–ù–ò–Ø (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        # print(f"[üì•] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.message} –∏–∑ —á–∞—Ç–∞ ID: {event.chat_id}")

        msg_text = message.message.lower()

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞
        chat = await event.get_chat()
        chat_username = getattr(chat, 'username', None)
        chat_id_str = str(event.chat_id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —á–∞—Ç
        if (
            (chat_username and chat_username.lower() not in self.chats)
            and (chat_id_str not in self.chats)
        ):
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
        if any(re.search(rf'\b{re.escape(keyword)}\b', msg_text) for keyword in self.keywords):
            await self._send_result(event.chat_id, message)

    async def _send_result(self, chat_id, message):
        sender = getattr(message.sender, 'username', None)
        sender_id = message.sender_id or "‚Äî"
        chat = await message.get_chat()

        chat_title = getattr(chat, 'title', str(chat_id))
        chat_username = getattr(chat, 'username', None)
        chat_link = f"https://t.me/{chat_username}" if chat_username else None
        message_link = (
            f"https://t.me/{chat_username}/{message.id}"
            if chat_username else f"https://t.me/c/{str(chat.id)[4:]}/{message.id}"
        )
        user_link = f"@{sender}" if sender else f"ID: {sender_id}"

        chat_line = f'–ß–∞—Ç: <a href="{chat_link}">{chat_title}</a>' if chat_link else f"–ß–∞—Ç: {chat_title}"

        formatted = (
            f"{chat_line}\n"
            f"–ê–≤—Ç–æ—Ä: {user_link}\n"
            f"–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: <a href=\"{message_link}\">–°—Å—ã–ª–∫–∞</a>\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n{message.text}\n\n"
        )

        try:
            await self.bot.send_message(chat_id=self.chat_id, text=formatted, parse_mode='HTML')
        except Exception as e:
            print(f"[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
