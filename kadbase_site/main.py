# ===============================
# üìÑ –ò–º–ø–æ—Ä—Ç—ã
# ===============================
import os
import glob
import time
from datetime import datetime
import xml.etree.ElementTree as ET

import undetected_chromedriver as uc
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.options import Options as ChromeOptions
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

from pandas import DataFrame, ExcelWriter
from openpyxl import load_workbook


# ===============================
# üß≠ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
# ===============================
def init_undetected_chromedriver(headless_mode: bool = False):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±—Ä–∞—É–∑–µ—Ä Chrome —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º undetected_chromedriver.

    :param headless_mode: –µ—Å–ª–∏ True ‚Äî –±—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –±–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
    :return: –æ–±—ä–µ–∫—Ç WebDriver.
    """
    options = ChromeOptions()
    if headless_mode:
        options.add_argument('--headless')

    driver = uc.Chrome(options=options)
    driver.implicitly_wait(3)
    driver.maximize_window()
    return driver


# ===============================
# üìÇ –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ XML
# ===============================
def get_xml_files(folder: str) -> list[str]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö XML-—Ñ–∞–π–ª–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ.
    """
    return glob.glob(os.path.join(folder, '*.xml*'))


def extract_land_records(root: ET.Element) -> list[dict[str, str]]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∑–µ–º–µ–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–∫–∞—Ö –∏–∑ XML-–¥–µ—Ä–µ–≤–∞.
    """
    records: list[dict[str, str]] = []

    for land_record in root.findall('.//land_record'):
        obj = land_record.find('./object')
        if obj is None:
            continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä–µ–∫—Ç ‚Äî –∑–µ–º–µ–ª—å–Ω—ã–π —É—á–∞—Å—Ç–æ–∫
        type_el = obj.find('./common_data/type/value')
        if type_el is None or type_el.text != '–ó–µ–º–µ–ª—å–Ω—ã–π —É—á–∞—Å—Ç–æ–∫':
            continue

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
        cad_number = (obj.findtext('./common_data/cad_number') or '').strip() or None
        address = (land_record.findtext('./address_location/address/readable_address') or '').strip() or None
        area_val = land_record.findtext('./params/area/value')
        area_unit = land_record.findtext('./params/area/unit')

        # –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–ª–æ—â–∞–¥–∏ –Ω–µ—Ç ‚Äî –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –¥—Ä—É–≥–æ–≥–æ –±–ª–æ–∫–∞
        if not area_val:
            area_val = land_record.findtext('../../area_quarter/area')
            area_unit = land_record.findtext('../../area_quarter/unit')

        area = f"{area_val.strip()} {area_unit.strip()}" if area_val and area_unit else (
            area_val.strip() if area_val else None
        )

        category = (land_record.findtext('./params/category/type/value') or '').strip() or None
        permitted_use = (land_record.findtext(
            './params/permitted_use/permitted_use_established/by_document') or '').strip() or None
        cad_cost = (land_record.findtext('./cost/value') or '').strip() or None

        records.append({
            '–ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä': cad_number,
            '–í–∏–¥ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏': '–ó–µ–º–µ–ª—å–Ω—ã–π —É—á–∞—Å—Ç–æ–∫',
            '–ê–¥—Ä–µ—Å': address,
            '–ü–ª–æ—â–∞–¥—å –∏–ª–∏ –æ—Å–Ω–æ–≤–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞': area,
            '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–µ–º–µ–ª—å': category,
            '–í–∏–¥ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è': permitted_use,
            '–ö–∞–¥–∞—Å—Ç—Ä–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å': cad_cost,
            '–§–æ—Ä–º–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏': ''
        })
    return records


def parse_xml_file(folder: str) -> list[dict[str, str]]:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ XML-—Ñ–∞–π–ª—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ.
    """
    xml_files: list[str] = get_xml_files(folder)
    all_records: list[dict[str, str]] = []

    for file_path in xml_files:
        try:
            tree = ET.parse(file_path)
            root = tree.getroot()
            records = extract_land_records(root)
            all_records.extend(records)
        except ET.ParseError as e:
            print(f'‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞ {file_path}: {e}')

        print(f'–û–±—Ä–∞–±–æ—Ç–∞–Ω —Ñ–∞–π–ª: {file_path} ')

    return all_records


# ===============================
# üìä –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Excel
# ===============================
def save_excel(data: list[dict[str, str]], cur_date: str) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Excel-—Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ 'results'.
    """
    directory = 'results'
    os.makedirs(directory, exist_ok=True)
    file_path: str = os.path.join(directory, f'result_data_{cur_date}.xlsx')

    df = DataFrame(data)
    with ExcelWriter(file_path, mode='w') as writer:
        df.to_excel(writer, sheet_name='–õ–∏—Å—Ç1', index=False)

    print(f'‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {file_path}')


# ===============================
# üè¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ "–§–æ—Ä–º–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏"
# ===============================
def update_ownership_excel(driver, excel_path: str, url: str, sheet: str = '–õ–∏—Å—Ç2', batch_size: int = 100) -> None:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Excel: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º—É —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–º—É –Ω–æ–º–µ—Ä—É
    —á–µ—Ä–µ–∑ —Å–∞–π—Ç –∏ —É–¥–∞–ª—è–µ—Ç —Å—Ç—Ä–æ–∫–∏ —Å —á–∞—Å—Ç–Ω–æ–π —Ñ–æ—Ä–º–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∏–ª–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö.
    """
    wb = load_workbook(excel_path)
    ws = wb[sheet]

    headers: list[str] = [cell.value for cell in ws[1]]
    cad_col: int = headers.index('–ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä') + 1
    ownership_col: int = headers.index('–§–æ—Ä–º–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏') + 1

    cad_rows: list[int] = [row for row in range(2, ws.max_row + 1) if ws.cell(row=row, column=cad_col).value]
    total: int = len(cad_rows)
    i: int = 0

    # –û–±—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫–∏ —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö, —á—Ç–æ–±—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è—Ç—å
    for row in reversed(cad_rows):
        i += 1
        cad_number: str = str(ws.cell(row=row, column=cad_col).value)

        try:
            driver.get(url)

            # –û–∂–∏–¥–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
            WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "input.input_search"))
            )

            # –í–≤–æ–¥–∏–º –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä
            input_box = driver.find_element(By.CSS_SELECTOR, 'input.input_search')
            input_box.clear()
            input_box.send_keys(cad_number)
            input_box.send_keys(Keys.ENTER)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–ª–æ–∫–∞ —Å —Ñ–æ—Ä–º–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
            ownership_divs = driver.find_elements(By.XPATH, "//div[contains(text(),'–§–æ—Ä–º–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏')]")
            if ownership_divs:
                ownership_div = ownership_divs[0]
                ownership: str = ownership_div.find_element(By.XPATH, "following-sibling::div").text.strip()

                # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —á–∞—Å—Ç–Ω–∞—è
                if ownership.lower() == '—á–∞—Å—Ç–Ω–∞—è':
                    ws.delete_rows(row)
                else:
                    ws.cell(row=row, column=ownership_col, value=ownership)
            else:
                # –ï—Å–ª–∏ –±–ª–æ–∫–∞ –Ω–µ—Ç ‚Äî —Ç–æ–∂–µ —É–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
                ws.delete_rows(row)

            print(f'–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–æ–º–µ—Ä–æ–≤: {i}/{total} ({cad_number})')

        except Exception as ex:
            print(f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {cad_number}: {ex}')

        # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ batch_size –∑–∞–ø–∏—Å–µ–π
        if i % batch_size == 0:
            wb.save(excel_path)
            print(f'üíæ –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i}/{total}')

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    wb.save(excel_path)
    print(f'‚úÖ Excel –æ–±–Ω–æ–≤–ª—ë–Ω: {excel_path}')


# ===============================
# üöÄ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
# ===============================
def main() -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É:

    - –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É `cur_date` –¥–ª—è –∏–º–µ–Ω–∏ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ Excel-—Ñ–∞–π–ª–∞.
    - –ó–∞–≥—Ä—É–∂–∞–µ—Ç XML-–¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞–ø–∫–∏ `data`.
    - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ Excel —Å –∏–º–µ–Ω–µ–º, –≤–∫–ª—é—á–∞—é—â–∏–º `cur_date`.
    - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±—Ä–∞—É–∑–µ—Ä Chrome —á–µ—Ä–µ–∑ undetected_chromedriver.
    - –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ —Å–∞–π—Ç –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é 60 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.
    - –û–±–Ω–æ–≤–ª—è–µ—Ç Excel-—Ñ–∞–π–ª: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º—É —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –∫–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–º –Ω–æ–º–µ—Ä–∞–º
      –∏ —É–¥–∞–ª—è–µ—Ç —Å—Ç—Ä–æ–∫–∏ —Å —á–∞—Å—Ç–Ω–æ–π —Ñ–æ—Ä–º–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∏–ª–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö.
    - –í –∫–æ–Ω—Ü–µ –≤—ã–≤–æ–¥–∏—Ç –æ–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã.
    """
    start_time = datetime.now()

    cur_date = datetime.now().strftime('%d-%m-%Y')

    data_folder: str = 'data'
    url: str = 'https://kadbase.ru/'

    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å XML –∏ —Å–æ–∑–¥–∞—Ç—å Excel
    # all_records = parse_xml_file(data_folder)
    # save_excel(all_records, cur_date=cur_date)
    excel_path: str = f'results/result_data_{cur_date}.xlsx'

    driver = init_undetected_chromedriver(headless_mode=False)
    try:
        # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—Ä—É—á–Ω—É—é
        driver.get("https://kadbase.ru/lk/")
        time.sleep(60)
        print("‚è≥ –£ –≤–∞—Å –µ—Å—Ç—å 60 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤—Ä—É—á–Ω—É—é...")

        update_ownership_excel(driver, excel_path, url)
    finally:
        driver.close()
        driver.quit()

    execution_time = datetime.now() - start_time
    print('–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω!')
    print(f'–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã: {execution_time}')


if __name__ == '__main__':
    main()
